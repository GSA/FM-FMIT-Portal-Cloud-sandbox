
@mixin grid-container($props...) {
  @if length($props) == 0 {
    @include u-margin-x(auto);
    @include u-maxw($theme-grid-container-max-width);
  }
  @else {
    $props: nth($props, 1);
    $margin-x: append-important($props, auto);
    @include u-margin-x($margin-x);
    @include u-maxw($props);
  }
}

@mixin grid-row($props...) {
  $display: append-important($grid-global, flex);
  $flex: append-important($grid-global, wrap);
  @include u-display($display);
  @include u-flex($flex);
}

@mixin grid-gap($props...) {
  $props: unpack($props);
  $gap: null;
  @if length($props) == 0 {
    $gap: $theme-column-gap;
  }
  @else {
    $gap: smart-quote(nth($props, 1));
  }
  @if $gap == 0 {
    @include u-margin-x(append-important($props, 0));

    > * {
      @include u-padding-y(append-important($props, 0));
    }
  }
  @else {
    @if map-has-key($project-column-gaps, $gap) {
      $gap: map-get($project-column-gaps, $gap);
    }
    @elseif map-has-key($uswds-column-gaps, $gap) {
      $gap: map-get($uswds-column-gaps, $gap);
    }
    @include u-margin-x(append-important($props, unquote("#{$neg-prefix}-#{calc-gap-offset($gap)}")));
    > [class*='grid-col'] {
      @include u-padding-x(append-important($props, calc-gap-offset($gap)));
    }
  }
}

@mixin grid-col($props...) {
  $props: unpack($props);
  @if length($props) == 0 {
    @include u-flex(fill);
    @include u-width(auto);
  }
  @else {
    $col: smart-quote(nth($props, 1));
    @if $col == 'auto' {
      $flex: append-important($props, auto);
      $width: append-important($props, auto);
      @include u-flex($flex);
      @include u-width($width);
    }
    @elseif $col == 'fill' {
      $flex: append-important($props, fill);
      $width: append-important($props, auto);
      @include u-flex($flex);
      @include u-width($width);
    }
    @elseif not map-has-key($uswds-layout-grid-widths, $col) {
      @error "#{$col} is not a valid layout grid width. Valid width are #{map-keys($uswds-layout-grid-widths)}";
    }
    @else {
      $flex: append-important($props, auto);
      $width: append-important($props, map-get($uswds-layout-grid-widths, $col));
      @include u-flex($flex);
      @include u-width(override, $width);
    }
  }
}

@mixin grid-offset($props...) {
  $props: unpack($props);
  $offset: smart-quote(nth($props, 1));
  @if $offset == 'none' {
    $width: append-important($props, 0);
    @include u-margin-left(override, $width);
  }
  @elseif not map-has-key($uswds-layout-grid-widths, $offset) {
    @error "#{$offset} is not a valid layout grid width. Valid width are #{map-keys($uswds-layout-grid-widths)}";
  }
  @else {
    $width: append-important($props, map-get($uswds-layout-grid-widths, $offset));
    @include u-margin-left(override, $width);
  }
}
